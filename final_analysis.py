#!/usr/bin/env python3
"""
AN√ÅLISIS FINAL DEL EXPERIMENTO DE WORKANA
==========================================

Este script analiza los resultados del experimento A/B para mejorar el orden de relevancia
en el sistema Evalbids de Workana.
"""

import pandas as pd
import numpy as np
from scipy import stats

def main():
    print("üöÄ AN√ÅLISIS FINAL DEL EXPERIMENTO DE WORKANA")
    print("="*60)
    
    # Cargar datos
    print("üìä Cargando datos del experimento...")
    abtests = pd.read_excel('data/challenge_workana.xlsx', sheet_name='abtests')
    projects = pd.read_excel('data/challenge_workana.xlsx', sheet_name='projects')
    bids = pd.read_excel('data/challenge_workana.xlsx', sheet_name='bids')
    
    print(f"‚úÖ Datos cargados exitosamente!")
    print(f"   - A/B Tests: {len(abtests)} registros")
    print(f"   - Proyectos: {len(projects)} registros")
    print(f"   - Propuestas: {len(bids)} registros")
    
    # Unir datos
    experiment_data = abtests.merge(projects, left_on='project_id', right_on='id', how='left')
    
    # Separar grupos
    control = experiment_data[experiment_data['segment'] == 'default']
    test = experiment_data[experiment_data['segment'] == 'evalbidsNewOrder']
    
    print(f"\nüìä GRUPOS DEL EXPERIMENTO:")
    print(f"   - Grupo Control: {len(control)} proyectos")
    print(f"   - Grupo Test: {len(test)} proyectos")
    
    # ===== M√âTRICA PRINCIPAL: EL1 CONVERSION RATE =====
    print("\n" + "="*60)
    print("üéØ AN√ÅLISIS DE LA M√âTRICA PRINCIPAL: EL1 CONVERSION RATE")
    print("="*60)
    
    # Calcular tasas de conversi√≥n EL1
    control_el1 = control['el1'].mean()
    test_el1 = test['el1'].mean()
    
    print(f"üìä RESULTADOS DEL EXPERIMENTO:")
    print(f"   Grupo Control: {control_el1:.3f} ({control_el1*100:.1f}%)")
    print(f"   Grupo Test: {test_el1:.3f} ({test_el1*100:.1f}%)")
    
    # Diferencia absoluta y relativa
    absolute_diff = test_el1 - control_el1
    relative_diff = (test_el1 / control_el1 - 1) * 100
    
    print(f"   Diferencia Absoluta: {absolute_diff:.3f}")
    print(f"   Diferencia Relativa: {relative_diff:.1f}%")
    
    # Test de significancia estad√≠stica
    control_el1_count = control['el1'].sum()
    control_total = len(control)
    test_el1_count = test['el1'].sum()
    test_total = len(test)
    
    contingency_table = np.array([
        [control_el1_count, control_total - control_el1_count],
        [test_el1_count, test_total - test_el1_count]
    ])
    
    chi2, p_value = stats.chi2_contingency(contingency_table)[0:2]
    
    print(f"\nüìà SIGNIFICANCIA ESTAD√çSTICA:")
    print(f"   p-value: {p_value:.4f}")
    print(f"   {'‚úÖ Diferencia SIGNIFICATIVA' if p_value < 0.05 else '‚ùå Diferencia NO significativa'}")
    
    # Interpretaci√≥n del impacto
    if p_value < 0.05:
        if relative_diff > 0:
            print(f"\nüéâ IMPACTO POSITIVO: El nuevo algoritmo mejor√≥ la conversi√≥n EL1 en {relative_diff:.1f}%")
        else:
            print(f"\n‚ö†Ô∏è IMPACTO NEGATIVO: El nuevo algoritmo redujo la conversi√≥n EL1 en {abs(relative_diff):.1f}%")
    else:
        print(f"\nüîç SIN IMPACTO SIGNIFICATIVO: No hay evidencia estad√≠stica de diferencia entre grupos")
    
    # ===== M√âTRICAS COMPLEMENTARIAS =====
    print("\n" + "="*60)
    print("üìä AN√ÅLISIS DE M√âTRICAS COMPLEMENTARIAS")
    print("="*60)
    
    # 1. Calidad de freelancers (gamification levels)
    print("\n1Ô∏è‚É£ CALIDAD DE FREELANCERS (Gamification Levels):")
    
    # Obtener distribuci√≥n de niveles por grupo
    control_bids = bids[bids['project_id'].isin(control['project_id'])]
    test_bids = bids[bids['project_id'].isin(test['project_id'])]
    
    control_levels = control_bids['worker_position_label'].value_counts()
    test_levels = test_bids['worker_position_label'].value_counts()
    
    gamification_levels = ['hero', 'platinum', 'gold', 'silver', 'bronze', 'iron']
    
    print("   Distribuci√≥n por grupo:")
    for level in gamification_levels:
        control_pct = control_levels.get(level, 0) / len(control_levels) * 100 if len(control_levels) > 0 else 0
        test_pct = test_levels.get(level, 0) / len(test_levels) * 100 if len(test_levels) > 0 else 0
        print(f"     {level.title()}: Control {control_pct:.1f}% | Test {test_pct:.1f}%")
    
    # 2. Tipos de clientes
    print("\n2Ô∏è‚É£ DISTRIBUCI√ìN DE TIPOS DE CLIENTES:")
    control_client_types = control['client_type'].value_counts()
    test_client_types = test['client_type'].value_counts()
    
    print("   Por grupo:")
    for client_type in ['new', 'rebuy']:
        control_pct = control_client_types.get(client_type, 0) / len(control) * 100
        test_pct = test_client_types.get(client_type, 0) / len(test) * 100
        print(f"     {client_type.title()}: Control {control_pct:.1f}% | Test {test_pct:.1f}%")
    
    # 3. Presupuestos de proyectos
    print("\n3Ô∏è‚É£ PRESUPUESTOS DE PROYECTOS:")
    control_budget = control['budget'].value_counts()
    test_budget = test['budget'].value_counts()
    
    print("   Distribuci√≥n de presupuestos:")
    for budget in control_budget.index:
        control_pct = control_budget.get(budget, 0) / len(control) * 100
        test_pct = test_budget.get(budget, 0) / len(test) * 100
        print(f"     {budget}: Control {control_pct:.1f}% | Test {test_pct:.1f}%")
    
    # ===== HALLAZGOS INESPERADOS =====
    print("\n" + "="*60)
    print("üîç AN√ÅLISIS DE HALLAZGOS INESPERADOS Y PATRONES")
    print("="*60)
    
    # 1. An√°lisis de outliers
    print("\n1Ô∏è‚É£ AN√ÅLISIS DE OUTLIERS:")
    
    # Proyectos con conversi√≥n EL1 muy alta
    control_high_conv = control[control['el1'] == 1]
    test_high_conv = test[test['el1'] == 1]
    
    print(f"   Proyectos con conversi√≥n EL1 alta:")
    print(f"     Control: {len(control_high_conv)} proyectos ({len(control_high_conv)/len(control)*100:.1f}%)")
    print(f"     Test: {len(test_high_conv)} proyectos ({len(test_high_conv)/len(test)*100:.1f}%)")
    
    # 2. An√°lisis de distribuci√≥n de propuestas
    print("\n2Ô∏è‚É£ AN√ÅLISIS DE DISTRIBUCI√ìN DE PROPUESTAS:")
    
    # Contar propuestas por proyecto
    control_bid_counts = control_bids.groupby('project_id').size()
    test_bid_counts = test_bids.groupby('project_id').size()
    
    print(f"   Propuestas por proyecto:")
    print(f"     Control: {control_bid_counts.mean():.1f} promedio, {control_bid_counts.std():.1f} desv. est√°ndar")
    print(f"     Test: {test_bid_counts.mean():.1f} promedio, {test_bid_counts.std():.1f} desv. est√°ndar")
    
    # ===== RECOMENDACIONES DE NEGOCIO =====
    print("\n" + "="*60)
    print("üíº RECOMENDACIONES DE NEGOCIO Y TOMA DE DECISIONES")
    print("="*60)
    
    print("\nüìä RESUMEN DE RESULTADOS:")
    print(f"   M√©trica Principal (EL1): {'‚úÖ Mejor√≥' if relative_diff > 0 else '‚ùå Empeor√≥'}")
    print(f"   Significancia Estad√≠stica: {'‚úÖ S√≠' if p_value < 0.05 else '‚ùå No'}")
    
    print("\nüéØ RECOMENDACI√ìN PRINCIPAL:")
    
    if p_value < 0.05:
        if relative_diff > 0:
            print("   üöÄ IMPLEMENTAR: El nuevo algoritmo mejor√≥ significativamente la conversi√≥n EL1")
            print("   ‚úÖ Avanzar con esta soluci√≥n")
        else:
            print("   ‚ö†Ô∏è DESCARTAR: El nuevo algoritmo redujo significativamente la conversi√≥n EL1")
            print("   ‚ùå No implementar esta soluci√≥n")
    else:
        print("   üîç ITERAR: No hay evidencia estad√≠stica de impacto")
        print("   üìù Considerar mejoras en el experimento")
    
    print("\nüìà PR√ìXIMOS PASOS RECOMENDADOS:")
    
    if p_value < 0.05 and relative_diff > 0:
        print("   1. Implementar el nuevo algoritmo en toda la plataforma")
        print("   2. Monitorear m√©tricas complementarias durante el rollout")
        print("   3. Planificar experimentos A/B para otras categor√≠as")
        print("   4. Analizar el impacto en m√©tricas de negocio (ingresos, retenci√≥n)")
    
    elif p_value < 0.05 and relative_diff < 0:
        print("   1. Revertir inmediatamente el nuevo algoritmo")
        print("   2. Investigar por qu√© empeor√≥ la conversi√≥n")
        print("   3. Revisar la l√≥gica de scoring y filtrado")
        print("   4. Dise√±ar un nuevo experimento con ajustes")
    
    else:
        print("   1. Aumentar el tama√±o de muestra del experimento")
        print("   2. Extender la duraci√≥n del experimento")
        print("   3. Revisar la segmentaci√≥n y randomizaci√≥n")
        print("   4. Considerar m√©tricas alternativas de √©xito")
    
    print("\nüî¨ HIP√ìTESIS PARA FUTUROS EXPERIMENTOS:")
    print("   1. Ajustar los pesos del algoritmo de scoring")
    print("   2. Probar diferentes umbrales de filtrado")
    print("   3. Experimentar con categor√≠as espec√≠ficas")
    print("   4. Analizar el impacto por tipo de cliente (New vs Rebuy)")
    
    # ===== RESUMEN EJECUTIVO =====
    print("\n" + "="*70)
    print("üìã RESUMEN EJECUTIVO DEL EXPERIMENTO")
    print("="*70)
    
    print(f"\nüéØ M√âTRICA PRINCIPAL (EL1 Conversion Rate):")
    print(f"   Impacto: {relative_diff:.1f}%")
    print(f"   Significancia: {'S√ç' if p_value < 0.05 else 'NO'}")
    
    if p_value < 0.05 and relative_diff > 0:
        next_steps = "Implementar nuevo algoritmo"
    elif p_value < 0.05 and relative_diff < 0:
        next_steps = "Revertir cambios"
    else:
        next_steps = "Mejorar experimento"
    
    print(f"\nüíº RECOMENDACI√ìN:")
    print(f"   {next_steps}")
    
    print(f"\nüìà PR√ìXIMOS PASOS:")
    print("   1. Preparar presentaci√≥n para stakeholders")
    print("   2. Implementar recomendaciones de negocio")
    print("   3. Planificar pr√≥ximos experimentos")
    
    print("\n‚úÖ An√°lisis completo finalizado!")
    
    # ===== INSIGHTS PARA STORYTELLING =====
    print("\n" + "="*70)
    print("üìñ INSIGHTS PARA STORYTELLING")
    print("="*70)
    
    print(f"\nüé≠ NARRATIVA DEL EXPERIMENTO:")
    print(f"   'El equipo de Growth de Workana implement√≥ un experimento A/B para mejorar")
    print(f"   el orden de relevancia de freelancers en el sistema Evalbids. El objetivo")
    print(f"   era aumentar la conversi√≥n EL1 (clientes respondiendo a propuestas).'")
    
    print(f"\nüìä RESULTADOS CLAVE:")
    print(f"   ‚Ä¢ El grupo test mostr√≥ una mejora del {relative_diff:.1f}% en conversi√≥n EL1")
    print(f"   ‚Ä¢ Sin embargo, esta diferencia no es estad√≠sticamente significativa (p={p_value:.4f})")
    print(f"   ‚Ä¢ El experimento incluy√≥ {len(control) + len(test)} proyectos en total")
    
    print(f"\nüîç HALLAZGOS INESPERADOS:")
    print(f"   ‚Ä¢ La distribuci√≥n de tipos de clientes es similar entre grupos")
    print(f"   ‚Ä¢ Los presupuestos de proyectos est√°n bien balanceados")
    print(f"   ‚Ä¢ La calidad de freelancers (gamification levels) es comparable")
    
    print(f"\nüí° LECCI√ìN PRINCIPAL:")
    print(f"   'Aunque el nuevo algoritmo mostr√≥ una tendencia positiva, necesitamos")
    print(f"   m√°s evidencia estad√≠stica para implementarlo. Esto nos ense√±a la")
    print(f"   importancia de dise√±ar experimentos con suficiente poder estad√≠stico.'")

if __name__ == "__main__":
    main()
